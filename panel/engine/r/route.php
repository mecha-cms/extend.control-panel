<?php namespace _\lot\x\panel;

// Hard-coded :(
\Route::set($_['/'] . '\:\:g\:\:/.state', 200, function() {
    extract($GLOBALS, \EXTR_SKIP);
    if (isset($_['i'])) {
        // Force as item page
        \Guard::kick($url->clean . $url->query . $url->hash);
    }
    $panes = $paths = [];
    foreach (\glob(\LOT . \DS . '*', \GLOB_NOSORT | \GLOB_ONLYDIR) as $panel) {
        $n = \basename($panel);
        if (false !== \strpos('_.-', $n[0])) {
            continue;
        }
        $panes['/' . $n] = 'x' === $n ? 'Extension' : \ucfirst($n);
    }
    foreach (\glob(\LOT . \DS . 'page' . \DS . '*.{archive,page}', \GLOB_NOSORT | \GLOB_BRACE) as $path) {
        $paths['/' . \pathinfo($path, \PATHINFO_FILENAME)] = \S . (new \Page($path))->title . \S;
    }
    \asort($panes);
    \asort($paths);
    $zones = \Cache::hit(__FILE__, function() {
        $zones = [];
        $regions = [
            \DateTimeZone::AFRICA,
            \DateTimeZone::AMERICA,
            \DateTimeZone::ANTARCTICA,
            \DateTimeZone::ASIA,
            \DateTimeZone::ATLANTIC,
            \DateTimeZone::AUSTRALIA,
            \DateTimeZone::EUROPE,
            \DateTimeZone::INDIAN,
            \DateTimeZone::PACIFIC,
        ];
        $timezones = [];
        $timezone_offsets = [];
        foreach ($regions as $region) {
            $timezones = \array_merge($timezones, \DateTimeZone::listIdentifiers($region));
        }
        foreach ($timezones as $timezone) {
            $tz = new \DateTimeZone($timezone);
            $timezone_offsets[$timezone] = $tz->getOffset(new \DateTime);
        }
        asort($timezone_offsets);
        foreach ($timezone_offsets as $zone => $offset) {
            $offset_prefix = $offset < 0 ? '-' : '+';
            $offset_formatted = \gmdate('H:i', \abs($offset));
            $zones[$zone] = 'GMT' . $offset_prefix . $offset_formatted . ' (' . \strtr($zone, '_', ' ') . ')';
        }
        return $zones;
    }, '1 year');
    $_['lot'] = \array_replace_recursive($_['lot'], require __DIR__ . \DS . 'state' . DS . 'state.php', [
        'bar' => [
            'lot' => [
                0 => [
                    'lot' => [
                        'folder' => ['hidden' => true],
                        'link' => [
                            'hidden' => false,
                            'url' => $url . $_['/'] . '::g::' . $_['state']['path'] . '/1' . $url->query('&', ['layout' => false, 'tab' => false]) . $url->hash
                        ],
                        's' => ['hidden' => true],
                        'search' => ['hidden' => true] // Hide search form
                    ]
                ]
            ]
        ],
        'desk' => [
            'lot' => [
                'form' => [
                    'lot' => [
                        'fields' => [
                            'lot' => [
                                0 => [
                                    'type' => 'Hidden',
                                    'name' => 'path',
                                    'value' => '/../state.php'
                                ],
                                // No use. This field was added just to remove error message of
                                // empty `file[name]` field generated by `_\lot\x\panel\task\get\file()`
                                1 => [
                                    'type' => 'Hidden',
                                    'name' => 'file[name]',
                                    'value' => 'state.php'
                                ]
                            ]
                        ],
                        1 => [
                            'lot' => [
                                'tabs' => [
                                    'lot' => [
                                        'file' => [
                                            'icon' => 'M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z',
                                            'title' => false,
                                            'description' => 'Site',
                                            'name' => 'site',
                                            'lot' => [
                                                'fields' => [
                                                    // type: Fields
                                                    'lot' => [
                                                        'content' => ['hidden'=> true],
                                                        'name' => ['hidden' => true],
                                                        'title' => [
                                                            'type' => 'Text',
                                                            'name' => 'state[title]',
                                                            'alt' => ($v = $state->title) ?? 'Title Goes Here',
                                                            'value' => $v,
                                                            'width' => true,
                                                            'stack' => 10
                                                        ],
                                                        'description' => [
                                                            'type' => 'Content',
                                                            'name' => 'state[description]',
                                                            'alt' => 'Description goes here...',
                                                            'value' => $state->description,
                                                            'width' => true,
                                                            'stack' => 20
                                                        ],
                                                        'path' => [
                                                            'title' => 'Home',
                                                            'description' => 'Choose default page that will open in the home page.',
                                                            'type' => 'Combo',
                                                            'name' => 'state[path]',
                                                            'value' => $state->path,
                                                            'lot' => $paths,
                                                            'stack' => 30
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ],
                                        'panel' => [
                                            'lot' => [
                                                'fields' => [
                                                    'type' => 'Fields',
                                                    'lot' => [
                                                        'path' => [
                                                            'title' => 'Home',
                                                            'description' => 'Choose default page that will open after logged-in.',
                                                            'type' => 'Combo',
                                                            'name' => 'state[x][panel][path]',
                                                            'value' => $state->x->panel->path ?? null,
                                                            'lot' => $panes,
                                                            'stack' => 10
                                                        ],
                                                        'key' => [
                                                            'description' => 'Set custom log-in path.',
                                                            'type' => 'Text',
                                                            'name' => 'state[x][user][guard][path]',
                                                            'pattern' => "^/([a-z\\d]+)(-[a-z\\d]+)*$",
                                                            'alt' => $state->x->user->path ?? null,
                                                            'value' => $state->x->user->guard->path ?? null,
                                                            'stack' => 20
                                                        ]
                                                    ],
                                                    'stack' => 10
                                                ]
                                            ],
                                            'stack' => 20
                                        ],
                                        'locale' => [
                                            'lot' => [
                                                'fields' => [
                                                    'type' => 'Fields',
                                                    'lot' => [
                                                        'zone' => [
                                                            'type' => 'Combo',
                                                            'name' => 'state[zone]',
                                                            'value' => $state->zone,
                                                            'lot' => $zones,
                                                            'width' => true,
                                                            'stack' => 10
                                                        ],
                                                        'direction' => [
                                                            'type' => 'Item',
                                                            'name' => 'state[direction]',
                                                            'value' => $state->direction,
                                                            'lot' => [
                                                                'ltr' => '<abbr title="Left to Right">LTR</abbr>',
                                                                'rtl' => '<abbr title="Right to Left">RTL</abbr>'
                                                            ],
                                                            'stack' => 20
                                                        ],
                                                        'charset' => [
                                                            'type' => 'Text',
                                                            'name' => 'state[charset]',
                                                            'alt' => ($v = $state->charset) ?? 'utf-8',
                                                            'value' => $v,
                                                            'stack' => 30
                                                        ],
                                                        'language' => [
                                                            'description' => 'This value does not determine the I18N system on your site unless you want to make an I18N extension that depends on this value.',
                                                            'type' => 'Text',
                                                            'name' => 'state[language]',
                                                            'pattern' => "^([a-z\\d]+)(-[a-z\\d]+)*$",
                                                            'alt' => ($v = $state->language) ?? 'en',
                                                            'value' => $v,
                                                            'stack' => 40
                                                        ]
                                                    ],
                                                    'stack' => 10
                                                ]
                                            ],
                                            'stack' => 30
                                        ],
                                        'alert' => [
                                            'title' => 'Notifications',
                                            'lot' => [
                                                'fields' => [
                                                    'type' => 'Fields',
                                                    'lot' => [
                                                        'email' => [
                                                            'description' => 'This email address will be used to receive certain messages to your inbox as the fastest solution for notifications. At this time you may not use it to receive any messages, but some extensions that require an email address may depend on this value.',
                                                            'type' => 'Email',
                                                            'name' => 'state[email]',
                                                            'value' => $state->email,
                                                            'stack' => 10
                                                        ]
                                                    ],
                                                    'stack' => 10
                                                ]
                                            ],
                                            'stack' => 40
                                        ]
                                    ]
                                ]
                            ]
                        ],
                        2 => [
                            'lot' => [
                                'fields' => [
                                    'lot' => [
                                        0 => [
                                            'lot' => [
                                                'tasks' => [
                                                    'lot' => [
                                                        'l' => ['hidden' => true], // Hide delete button
                                                        's' => [
                                                            'description' => ['Save to %s', ".\\state.php"]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]);
    $GLOBALS['_'] = $_;
    $GLOBALS['t'][] = i('Panel');
    $GLOBALS['t'][] = i('State');
    \State::set([
        'has' => [
            'parent' => \count($_['chops']) > 1,
        ],
        'is' => [
            'error' => false,
            'page' => true,
            'pages' => false
        ]
    ]);
    $this->view('panel');
}, 10);

function route() {
    if ('f' === $GLOBALS['_']['task']) {
        $this->type('text/plain');
        $this->content("");
    }
    if (\Request::is('Get')) {
        if (!\Is::user()) {
            \Guard::kick("");
        }
        extract($GLOBALS, \EXTR_SKIP);
        $GLOBALS['t'][] = \i('Panel');
        $f = $_['f'];
        // Redirect if file already exists
        if ('s' === $_['task'] && $f && \is_file($f)) {
            \Alert::info('File %s already exists.', '<code>' . \_\lot\x\panel\h\path($f) . '</code>');
            \Guard::kick(\str_replace('::s::', '::g::', $url->current));
        }
        \State::set([
            'has' => [
                'parent' => \count($_['chops']) > 1,
            ],
            'is' => [
                'error' => false,
                'page' => !isset($_['i']),
                'pages' => isset($_['i'])
            ]
        ]);
        if (
            // Trying to get file that does not exist
            'g' === $_['task'] && !$f ||
            // Trying to set file from a folder that does not exist
            's' === $_['task'] && (!$f || !\is_dir($f))
        ) {
            $GLOBALS['t'][] = \i('Error');
            \State::set([
                '[layout]' => ['layout:' . $_['layout'] => false],
                'is' => [
                    'error' => 404
                ]
            ]);
            $this->status(404);
            $this->view('panel.404');
        }
        $n = \ltrim($_['chops'][0], '_.-');
        $GLOBALS['t'][] = isset($_['path']) ? \i('x' === $n ? 'Extension' : \ucfirst($n)) : null;
        $this->view('panel');
    }
}

\Route::set($_['/'] . '*', 200, __NAMESPACE__ . "\\route", 20);
