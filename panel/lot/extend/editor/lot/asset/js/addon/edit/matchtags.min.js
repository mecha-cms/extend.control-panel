!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror"),require("../fold/xml-fold")):"function"==typeof define&&define.amd?define(["../../lib/codemirror","../fold/xml-fold"],e):e(CodeMirror)}(function(e){"use strict";function t(e){e.state.tagHit&&e.state.tagHit.clear(),e.state.tagOther&&e.state.tagOther.clear(),e.state.tagHit=e.state.tagOther=null}function r(r){r.state.failedTagMatch=!1,r.operation(function(){if(t(r),!r.somethingSelected()){var i=r.getCursor(),n=r.getViewport();n.from=Math.min(n.from,i.line),n.to=Math.max(i.line+1,n.to);var a=e.findMatchingTag(r,i,n);if(a){if(r.state.matchBothTags){var o="open"==a.at?a.open:a.close;o&&(r.state.tagHit=r.markText(o.from,o.to,{className:"CodeMirror-matchingtag"}))}var l="close"==a.at?a.open:a.close;l?r.state.tagOther=r.markText(l.from,l.to,{className:"CodeMirror-matchingtag"}):r.state.failedTagMatch=!0}}})}function i(e){e.state.failedTagMatch&&r(e)}e.defineOption("matchTags",!1,function(n,a,o){o&&o!=e.Init&&(n.off("cursorActivity",r),n.off("viewportChange",i),t(n)),a&&(n.state.matchBothTags="object"==typeof a&&a.bothTags,n.on("cursorActivity",r),n.on("viewportChange",i),r(n))}),e.commands.toMatchingTag=function(t){var r=e.findMatchingTag(t,t.getCursor());if(r){var i="close"==r.at?r.open:r.close;i&&t.extendSelection(i.to,i.from)}}});